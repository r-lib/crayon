[{"path":[]},{"path":"http://r-lib.github.io/crayon/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"http://r-lib.github.io/crayon/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others‚Äô private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"http://r-lib.github.io/crayon/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"http://r-lib.github.io/crayon/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"http://r-lib.github.io/crayon/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"http://r-lib.github.io/crayon/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"http://r-lib.github.io/crayon/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"http://r-lib.github.io/crayon/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"http://r-lib.github.io/crayon/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"http://r-lib.github.io/crayon/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"http://r-lib.github.io/crayon/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla‚Äôs code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"http://r-lib.github.io/crayon/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 crayon authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://r-lib.github.io/crayon/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"G√°bor Cs√°rdi. Author, maintainer. Brodie Gaslam. Contributor. Posit Software, PBC. Copyright holder, funder.           03wc8by49","code":""},{"path":"http://r-lib.github.io/crayon/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cs√°rdi G (2025). crayon: Colored Terminal Output. R package version 1.5.3.9000, https://r-lib.github.io/crayon/.","code":"@Manual{,   title = {crayon: Colored Terminal Output},   author = {G√°bor Cs√°rdi},   year = {2025},   note = {R package version 1.5.3.9000},   url = {https://r-lib.github.io/crayon/}, }"},{"path":"http://r-lib.github.io/crayon/dev/index.html","id":"id_-crayon-is-now-superseded-by-the-cli-package-","dir":"","previous_headings":"","what":"üöÄ crayon is now superseded by the cli package. üöÄ","title":"Colored Terminal Output","text":"Please use cli new projects. crayon still supported receive important bug fixes, new features. Stylish terminal output R crayon easy add color terminal output, create styles notes, warnings, errors; combine styles. ANSI color support automatically detected used. Crayon largely inspired chalk.","code":""},{"path":"http://r-lib.github.io/crayon/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Colored Terminal Output","text":"Stable version: Development version:","code":"install.packages(\"crayon\") pak::pak(\"r-lib/crayon\")"},{"path":"http://r-lib.github.io/crayon/dev/index.html","id":"styles","dir":"","previous_headings":"","what":"Styles","title":"Colored Terminal Output","text":"Crayon defines several styles can combined. style list corresponding function name.","code":""},{"path":"http://r-lib.github.io/crayon/dev/index.html","id":"general-styles","dir":"","previous_headings":"Styles","what":"General styles","title":"Colored Terminal Output","text":"reset bold blurred (usually called dim, renamed avoid name clash) italic (widely supported) underline inverse hidden strikethrough (widely supported)","code":""},{"path":"http://r-lib.github.io/crayon/dev/index.html","id":"text-colors","dir":"","previous_headings":"Styles","what":"Text colors","title":"Colored Terminal Output","text":"black red green yellow blue magenta cyan white silver (usually called gray, renamed avoid name clash)","code":""},{"path":"http://r-lib.github.io/crayon/dev/index.html","id":"background-colors","dir":"","previous_headings":"Styles","what":"Background colors","title":"Colored Terminal Output","text":"bgBlack bgRed bgGreen bgYellow bgBlue bgMagenta bgCyan bgWhite","code":""},{"path":[]},{"path":"http://r-lib.github.io/crayon/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Colored Terminal Output","text":"styling functions take number character vectors arguments, concatenate style : Crayon defines %+% string concatenation operator make easy assemble strings different styles. Styles can combined using $ operator: Styles can also nested, inner style takes precedence: easy define themes:","code":"library(crayon) cat(blue(\"Hello\", \"world!\\n\")) cat(\"... to highlight the \" %+% red(\"search term\") %+% \" in a block of text\\n\") cat(yellow$bgMagenta$bold('Hello world!\\n')) cat(green(   'I am a green line ' %+%   blue$underline$bold('with a blue substring') %+%   ' that becomes green again!\\n' )) error <- red $ bold warn <- magenta $ underline note <- cyan cat(error(\"Error: subscript out of bounds!\\n\")) cat(warn(\"Warning: shorter argument was recycled.\\n\")) cat(note(\"Note: no such directory.\\n\"))"},{"path":"http://r-lib.github.io/crayon/dev/index.html","id":"id_256-colors","dir":"","previous_headings":"","what":"256 colors","title":"Colored Terminal Output","text":"modern terminals support ANSI standard 256 colors, can define new styles make use . make_style function defines new style. can handle R‚Äôs built color names (see output colors()) well RGB specifications via rgb() function. automatically chooses ANSI colors closest specified R RGB colors, also fallback terminals 8 ANSI colors .","code":"ivory <- make_style(\"ivory\") bgMaroon <- make_style(\"maroon\", bg = TRUE) fancy <- combine_styles(ivory, bgMaroon) cat(fancy(\"This will have some fancy colors\"), \"\\n\")"},{"path":"http://r-lib.github.io/crayon/dev/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Colored Terminal Output","text":"MIT @ G√°bor Cs√°rdi","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to character ‚Äî chr","title":"Convert to character ‚Äî chr","text":"function just calls .character(), easier type read.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to character ‚Äî chr","text":"","code":"chr(x, ...)"},{"path":"http://r-lib.github.io/crayon/dev/reference/chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to character ‚Äî chr","text":"x Object coerced. ... arguments pass .character().","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to character ‚Äî chr","text":"Character value.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/col_align.html","id":null,"dir":"Reference","previous_headings":"","what":"Align an ANSI colored string ‚Äî col_align","title":"Align an ANSI colored string ‚Äî col_align","text":"Align ANSI colored string","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/col_align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align an ANSI colored string ‚Äî col_align","text":"","code":"col_align(   text,   width = getOption(\"width\"),   align = c(\"left\", \"center\", \"right\"),   type = \"width\" )"},{"path":"http://r-lib.github.io/crayon/dev/reference/col_align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align an ANSI colored string ‚Äî col_align","text":"text character vector align. width Width field align . align Whether align \"left\", \"center\" \"right\". type Passed col_nchar() nchar()","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/col_align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align an ANSI colored string ‚Äî col_align","text":"aligned character vector.","code":""},{"path":[]},{"path":"http://r-lib.github.io/crayon/dev/reference/col_align.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align an ANSI colored string ‚Äî col_align","text":"","code":"col_align(red(\"foobar\"), 20, \"left\") #> [1] \"\\033[31mfoobar\\033[39m              \" col_align(red(\"foobar\"), 20, \"center\") #> [1] \"       \\033[31mfoobar\\033[39m       \" col_align(red(\"foobar\"), 20, \"right\") #> [1] \"              \\033[31mfoobar\\033[39m\""},{"path":"http://r-lib.github.io/crayon/dev/reference/col_nchar.html","id":null,"dir":"Reference","previous_headings":"","what":"Count number of characters in an ANSI colored string ‚Äî col_nchar","title":"Count number of characters in an ANSI colored string ‚Äî col_nchar","text":"color-aware counterpart base::nchar(), well, since also counts ANSI control characters.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/col_nchar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count number of characters in an ANSI colored string ‚Äî col_nchar","text":"","code":"col_nchar(x, ...)"},{"path":"http://r-lib.github.io/crayon/dev/reference/col_nchar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count number of characters in an ANSI colored string ‚Äî col_nchar","text":"x Character vector, potentially ANSO styled, vector coarced character. ... Additional arguments, passed base::nchar() removing ANSI escape sequences.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/col_nchar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count number of characters in an ANSI colored string ‚Äî col_nchar","text":"Numeric vector, length strings character vector.","code":""},{"path":[]},{"path":"http://r-lib.github.io/crayon/dev/reference/col_nchar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count number of characters in an ANSI colored string ‚Äî col_nchar","text":"","code":"str <- paste(   red(\"red\"),   \"default\",   green(\"green\") )  cat(str, \"\\n\") #> red default green  nchar(str) #> [1] 37 col_nchar(str) #> [1] 17 nchar(strip_style(str)) #> [1] 17"},{"path":"http://r-lib.github.io/crayon/dev/reference/col_strsplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Split an ANSI colored string ‚Äî col_strsplit","title":"Split an ANSI colored string ‚Äî col_strsplit","text":"color-aware counterpart base::strsplit(). works almost exactly like original, keeps colors substrings.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/col_strsplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split an ANSI colored string ‚Äî col_strsplit","text":"","code":"col_strsplit(x, split, ...)"},{"path":"http://r-lib.github.io/crayon/dev/reference/col_strsplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split an ANSI colored string ‚Äî col_strsplit","text":"x Character vector, potentially ANSI styled, vector coarced character. split Character vector length 1 (object can coerced ) containing regular expression(s) (unless fixed = TRUE) use splitting.  empty matches occur, particular split zero characters, x split single characters. ... Extra arguments passed base::strsplit().","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/col_strsplit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split an ANSI colored string ‚Äî col_strsplit","text":"list length x, \\(\\)-th element contains vector splits x[]. ANSI styles retained.","code":""},{"path":[]},{"path":"http://r-lib.github.io/crayon/dev/reference/col_strsplit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split an ANSI colored string ‚Äî col_strsplit","text":"","code":"str <- red(\"I am red---\") %+%   green(\"and I am green-\") %+%   underline(\"I underlined\")  cat(str, \"\\n\") #> I am red---and I am green-I underlined   # split at dashes, keep color cat(col_strsplit(str, \"[-]+\")[[1]], sep = \"\\n\") #> I am red #> and I am green #> I underlined strsplit(strip_style(str), \"[-]+\") #> [[1]] #> [1] \"I am red\"       \"and I am green\" \"I underlined\"   #>   # split to characters, keep color cat(col_strsplit(str, \"\")[[1]], \"\\n\", sep = \" \") #> I   a m   r e d - - - a n d   I   a m   g r e e n - I   u n d e r l i n e d  strsplit(strip_style(str), \"\") #> [[1]] #>  [1] \"I\" \" \" \"a\" \"m\" \" \" \"r\" \"e\" \"d\" \"-\" \"-\" \"-\" \"a\" \"n\" \"d\" \" \" \"I\" \" \" \"a\" \"m\" #> [20] \" \" \"g\" \"r\" \"e\" \"e\" \"n\" \"-\" \"I\" \" \" \"u\" \"n\" \"d\" \"e\" \"r\" \"l\" \"i\" \"n\" \"e\" \"d\" #>"},{"path":"http://r-lib.github.io/crayon/dev/reference/col_substr.html","id":null,"dir":"Reference","previous_headings":"","what":"Substring(s) of an ANSI colored string ‚Äî col_substr","title":"Substring(s) of an ANSI colored string ‚Äî col_substr","text":"color-aware counterpart base::substr(). works exactly like original, keeps colors substrings. ANSI escape sequences ignored calculating positions within string.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/col_substr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substring(s) of an ANSI colored string ‚Äî col_substr","text":"","code":"col_substr(x, start, stop)"},{"path":"http://r-lib.github.io/crayon/dev/reference/col_substr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substring(s) of an ANSI colored string ‚Äî col_substr","text":"x Character vector, potentially ANSI styled, vector coarced character. start Starting index indices, recycled match length x. stop Ending index indices, recycled match length x.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/col_substr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substring(s) of an ANSI colored string ‚Äî col_substr","text":"Character vector length x, containing requested substrings. ANSI styles retained.","code":""},{"path":[]},{"path":"http://r-lib.github.io/crayon/dev/reference/col_substr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substring(s) of an ANSI colored string ‚Äî col_substr","text":"","code":"str <- paste(   red(\"red\"),   \"default\",   green(\"green\") )  cat(str, \"\\n\") #> red default green  cat(col_substr(str, 1, 5), \"\\n\") #> red d  cat(col_substr(str, 1, 15), \"\\n\") #> red default gre  cat(col_substr(str, 3, 7), \"\\n\") #> d def   substr(strip_style(str), 1, 5) #> [1] \"red d\" substr(strip_style(str), 1, 15) #> [1] \"red default gre\" substr(strip_style(str), 3, 7) #> [1] \"d def\"  str2 <- \"another \" %+%   red(\"multi-\", sep = \"\", underline(\"style\")) %+%   \" text\"  cat(str2, \"\\n\") #> another multi-style text  cat(col_substr(c(str, str2), c(3,5), c(7, 18)), sep = \"\\n\") #> d def #> her multi-styl substr(strip_style(c(str, str2)), c(3,5), c(7, 18)) #> [1] \"d def\"          \"her multi-styl\""},{"path":"http://r-lib.github.io/crayon/dev/reference/col_substring.html","id":null,"dir":"Reference","previous_headings":"","what":"Substring(s) of an ANSI colored string ‚Äî col_substring","title":"Substring(s) of an ANSI colored string ‚Äî col_substring","text":"color-aware counterpart base::substring(). works exactly like original, keeps colors substrings. ANSI escape sequences ignored calculating positions within string.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/col_substring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substring(s) of an ANSI colored string ‚Äî col_substring","text":"","code":"col_substring(text, first, last = 1000000L)"},{"path":"http://r-lib.github.io/crayon/dev/reference/col_substring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substring(s) of an ANSI colored string ‚Äî col_substring","text":"text Character vector, potentially ANSI styled, vector coarced character. recycled longest first last. first Starting index indices, recycled match length x. last Ending index indices, recycled match length x.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/col_substring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substring(s) of an ANSI colored string ‚Äî col_substring","text":"Character vector length x, containing requested substrings. ANSI styles retained.","code":""},{"path":[]},{"path":"http://r-lib.github.io/crayon/dev/reference/col_substring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substring(s) of an ANSI colored string ‚Äî col_substring","text":"","code":"str <- paste(   red(\"red\"),   \"default\",   green(\"green\") )  cat(str, \"\\n\") #> red default green  cat(col_substring(str, 1, 5), \"\\n\") #> red d  cat(col_substring(str, 1, 15), \"\\n\") #> red default gre  cat(col_substring(str, 3, 7), \"\\n\") #> d def   substring(strip_style(str), 1, 5) #> [1] \"red d\" substring(strip_style(str), 1, 15) #> [1] \"red default gre\" substring(strip_style(str), 3, 7) #> [1] \"d def\"  str2 <- \"another \" %+%   red(\"multi-\", sep = \"\", underline(\"style\")) %+%   \" text\"  cat(str2, \"\\n\") #> another multi-style text  cat(col_substring(str2, c(3,5), c(7, 18)), sep = \"\\n\") #> other #> her multi-styl substring(strip_style(str2), c(3,5), c(7, 18)) #> [1] \"other\"          \"her multi-styl\""},{"path":"http://r-lib.github.io/crayon/dev/reference/combine_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine two or more ANSI styles ‚Äî combine_styles","title":"Combine two or more ANSI styles ‚Äî combine_styles","text":"Combine two styles style functions new style function can called strings style .","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/combine_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine two or more ANSI styles ‚Äî combine_styles","text":"","code":"combine_styles(...)  # S3 method for class 'crayon' crayon$style"},{"path":"http://r-lib.github.io/crayon/dev/reference/combine_styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine two or more ANSI styles ‚Äî combine_styles","text":"... styles combine. applied right left. crayon style function. style style name included names(styles()).","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/combine_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine two or more ANSI styles ‚Äî combine_styles","text":"combined style function.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/combine_styles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine two or more ANSI styles ‚Äî combine_styles","text":"usually make sense combine two foreground colors (two background colors), first one applied used. make sense combine different kind styles, e.g. background color, foreground color, bold font. $ operator can also used combine styles. Note left hand side $ style function, right hand side name style styles().","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/combine_styles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine two or more ANSI styles ‚Äî combine_styles","text":"","code":"## Use style names alert <- combine_styles(\"bold\", \"red4\", \"bgCyan\") cat(alert(\"Warning!\"), \"\\n\") #> Warning!   ## Or style functions alert <- combine_styles(bold, red, bgCyan) cat(alert(\"Warning!\"), \"\\n\") #> Warning!   ## Combine a composite style alert <- combine_styles(bold, combine_styles(red, bgCyan)) cat(alert(\"Warning!\"), \"\\n\") #> Warning!   ## Shorter notation alert <- bold $ red $ bgCyan cat(alert(\"Warning!\"), \"\\n\") #> Warning!"},{"path":"http://r-lib.github.io/crayon/dev/reference/concat.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate character vectors ‚Äî concat","title":"Concatenate character vectors ‚Äî concat","text":"length two arguments must match, one must length one. length one argument one, output's length match length argument. See examples .","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/concat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate character vectors ‚Äî concat","text":"","code":"lhs %+% rhs"},{"path":"http://r-lib.github.io/crayon/dev/reference/concat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate character vectors ‚Äî concat","text":"lhs Left hand side, character vector. rhs Right hand side, character vector.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/concat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate character vectors ‚Äî concat","text":"Concatenated vectors.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/concat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate character vectors ‚Äî concat","text":"","code":"\"foo\" %+% \"bar\" #> [1] \"foobar\"  letters[1:10] %+% chr(1:10) #>  [1] \"a1\"  \"b2\"  \"c3\"  \"d4\"  \"e5\"  \"f6\"  \"g7\"  \"h8\"  \"i9\"  \"j10\"  letters[1:10] %+% \"-\" %+% chr(1:10) #>  [1] \"a-1\"  \"b-2\"  \"c-3\"  \"d-4\"  \"e-5\"  \"f-6\"  \"g-7\"  \"h-8\"  \"i-9\"  \"j-10\"  ## This is empty (unlike for parse) character() %+% \"*\" #> character(0)"},{"path":"http://r-lib.github.io/crayon/dev/reference/crayon.html","id":null,"dir":"Reference","previous_headings":"","what":"Colored terminal output ‚Äî crayon","title":"Colored terminal output ‚Äî crayon","text":"crayon easy add color terminal output, create styles notes, warnings, errors; combine styles.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/crayon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colored terminal output ‚Äî crayon","text":"","code":"## Simple styles red(...) bold(...) # ...  ## See more styling below"},{"path":"http://r-lib.github.io/crayon/dev/reference/crayon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colored terminal output ‚Äî crayon","text":"... Strings style.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/crayon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Colored terminal output ‚Äî crayon","text":"ANSI color support automatically detected used. Crayon largely inspired chalk https://github.com/chalk/chalk. Crayon defines several styles, can combined. style list corresponding function name.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/crayon.html","id":"genaral-styles","dir":"Reference","previous_headings":"","what":"Genaral styles","title":"Colored terminal output ‚Äî crayon","text":"reset bold blurred (usually called ‚Äòdim‚Äô, renamed avoid name clash) italic (widely supported) underline inverse hidden strikethrough (widely supported)","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/crayon.html","id":"text-colors","dir":"Reference","previous_headings":"","what":"Text colors","title":"Colored terminal output ‚Äî crayon","text":"black red green yellow blue magenta cyan white silver (usually called ‚Äògray‚Äô, renamed avoid name clash)","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/crayon.html","id":"background-colors","dir":"Reference","previous_headings":"","what":"Background colors","title":"Colored terminal output ‚Äî crayon","text":"bgBlack bgRed bgGreen bgYellow bgBlue bgMagenta bgCyan bgWhite","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/crayon.html","id":"styling","dir":"Reference","previous_headings":"","what":"Styling","title":"Colored terminal output ‚Äî crayon","text":"styling functions take number character vectors arguments, concatenate style : Crayon defines %+% string concatenation operator, make easy assemble stings different styles. Styles can combined using $ operator: See also combine_styles(). Styles can also nested, inner style takes precedence: easy define themes:","code":"library(crayon)   cat(blue(\"Hello\", \"world!\\n\")) cat(\"... to highlight the \" %+% red(\"search term\") %+%       \" in a block of text\\n\") cat(yellow$bgMagenta$bold('Hello world!\\n')) cat(green(     'I am a green line ' %+%     blue$underline$bold('with a blue substring') %+%     ' that becomes green again!\\n'   )) error <- red $ bold   warn <- magenta $ underline   note <- cyan   cat(error(\"Error: subscript out of bounds!\\n\"))   cat(warn(\"Warning: shorter argument was recycled.\\n\"))   cat(note(\"Note: no such directory.\\n\"))"},{"path":[]},{"path":"http://r-lib.github.io/crayon/dev/reference/crayon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Colored terminal output ‚Äî crayon","text":"Maintainer: G√°bor Cs√°rdi csardi.gabor@gmail.com contributors: Brodie Gaslam brodie.gaslam@yahoo.com [contributor] Posit Software, PBC [copyright holder, funder]","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/crayon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Colored terminal output ‚Äî crayon","text":"","code":"cat(blue(\"Hello\", \"world!\")) #> Hello world!  cat(\"... to highlight the \" %+% red(\"search term\") %+%     \" in a block of text\") #> ... to highlight the search term in a block of text  cat(yellow$bgMagenta$bold('Hello world!')) #> Hello world!  cat(green(  'I am a green line ' %+%  blue$underline$bold('with a blue substring') %+%  ' that becomes green again!' )) #> I am a green line with a blue substring that becomes green again!  error <- red $ bold warn <- magenta $ underline note <- cyan cat(error(\"Error: subscript out of bounds!\\n\")) #> Error: subscript out of bounds! #>  cat(warn(\"Warning: shorter argument was recycled.\\n\")) #> Warning: shorter argument was recycled. #>  cat(note(\"Note: no such directory.\\n\")) #> Note: no such directory. #>"},{"path":"http://r-lib.github.io/crayon/dev/reference/drop_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a style ‚Äî drop_style","title":"Remove a style ‚Äî drop_style","text":"Remove style","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/drop_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a style ‚Äî drop_style","text":"","code":"drop_style(style)"},{"path":"http://r-lib.github.io/crayon/dev/reference/drop_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a style ‚Äî drop_style","text":"style name style remove. error given non-existing names.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/drop_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a style ‚Äî drop_style","text":"Nothing.","code":""},{"path":[]},{"path":"http://r-lib.github.io/crayon/dev/reference/drop_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a style ‚Äî drop_style","text":"","code":"make_style(new_style = \"maroon\", bg = TRUE) #> Crayon style function, new_style: example output. cat(style(\"I am maroon\", \"new_style\"), \"\\n\") #> I am maroon  drop_style(\"new_style\") \"new_style\" %in% names(styles()) #> [1] FALSE"},{"path":"http://r-lib.github.io/crayon/dev/reference/has_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Does the current R session support ANSI colors? ‚Äî has_color","title":"Does the current R session support ANSI colors? ‚Äî has_color","text":"crayon 2.0.0, function simply wrapper num_ansi_colors().","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/has_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does the current R session support ANSI colors? ‚Äî has_color","text":"","code":"has_color()"},{"path":"http://r-lib.github.io/crayon/dev/reference/has_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does the current R session support ANSI colors? ‚Äî has_color","text":"TRUE current R session supports color.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/has_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does the current R session support ANSI colors? ‚Äî has_color","text":"","code":"has_color() #> [1] TRUE"},{"path":"http://r-lib.github.io/crayon/dev/reference/has_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a string has some ANSI styling ‚Äî has_style","title":"Check if a string has some ANSI styling ‚Äî has_style","text":"Check string ANSI styling","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/has_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a string has some ANSI styling ‚Äî has_style","text":"","code":"has_style(string)"},{"path":"http://r-lib.github.io/crayon/dev/reference/has_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a string has some ANSI styling ‚Äî has_style","text":"string string check. can also character vector.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/has_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a string has some ANSI styling ‚Äî has_style","text":"Logical vector, TRUE strings ANSI styling.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/has_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a string has some ANSI styling ‚Äî has_style","text":"","code":"## The second one has style if crayon is enabled has_style(\"foobar\") #> [1] FALSE has_style(red(\"foobar\")) #> [1] TRUE"},{"path":"http://r-lib.github.io/crayon/dev/reference/hyperlink.html","id":null,"dir":"Reference","previous_headings":"","what":"Terminal Hyperlinks ‚Äî hyperlink","title":"Terminal Hyperlinks ‚Äî hyperlink","text":"Terminal Hyperlinks","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/hyperlink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminal Hyperlinks ‚Äî hyperlink","text":"","code":"hyperlink(text, url)  has_hyperlink()"},{"path":"http://r-lib.github.io/crayon/dev/reference/hyperlink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminal Hyperlinks ‚Äî hyperlink","text":"text Text show. text url recycled match length, via paste0() call. url URL link .","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/hyperlink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Terminal Hyperlinks ‚Äî hyperlink","text":"Logical scalar, has_hyperlink().","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/hyperlink.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Terminal Hyperlinks ‚Äî hyperlink","text":"hyperlink()` creates ANSI hyperlink. has_hyperlink() checks current stdout() supports hyperlinks. terminal links. See also https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/hyperlink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Terminal Hyperlinks ‚Äî hyperlink","text":"","code":"cat(\"This is an\", hyperlink(\"R\", \"https://r-project.org\"), \"link.\\n\") #> This is an R link. has_hyperlink() #> [1] FALSE"},{"path":"http://r-lib.github.io/crayon/dev/reference/make_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an ANSI color style ‚Äî make_style","title":"Create an ANSI color style ‚Äî make_style","text":"Create style, style function, . function intended wish use 256 ANSI colors, instead widely supported eight colors.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/make_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an ANSI color style ‚Äî make_style","text":"","code":"make_style(..., bg = FALSE, grey = FALSE, colors = num_colors())"},{"path":"http://r-lib.github.io/crayon/dev/reference/make_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an ANSI color style ‚Äî make_style","text":"... style create. See details examples . bg Whether color applies background. grey Whether specifically create grey color. flag included ANSI 256 finer color scale greys usual 0:5 scale R, G B components. used RGB color specifications (either numerically via hexa string) ignored eigth color ANSI terminals. colors Number colors, detected automatically default.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/make_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an ANSI color style ‚Äî make_style","text":"function can used color strings.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/make_style.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an ANSI color style ‚Äî make_style","text":"crayon package comes predefined styles (see styles() list) functions basic eight-color ANSI standard (red, blue, etc., see crayon). predefined styles style functions 256 color ANSI mode, however, simply want create many styles functions. Instead, make_style() can used create style (style function, ). two ways use function: first argument named, returns function can used color strings. first argument named, also creates style given name. style can used style(). One can still use return value function, create style function. style (... argument) can anything following: R color name, see colors(). 6- 8-digit hexa color string, e.g. #ff0000 means red. Transparency (alpha channel) values ignored. one-column matrix three rows red, green blue channels, returned col2rgb (base grDevices package). make_style() detects number colors use automatically (can overridden using colors argument). number colors less 256 (detected given), falls back color ANSI eight color mode closest specified (RGB R) color. See examples .","code":""},{"path":[]},{"path":"http://r-lib.github.io/crayon/dev/reference/make_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an ANSI color style ‚Äî make_style","text":"","code":"## Create a style function without creating a style pink <- make_style(\"pink\") bgMaroon <- make_style(rgb(0.93, 0.19, 0.65), bg = TRUE) cat(bgMaroon(pink(\"I am pink if your terminal wants it, too.\\n\"))) #> I am pink if your terminal wants it, too. #>   ## Create a new style for pink and maroon background make_style(pink = \"pink\") #> Crayon style function, pink: example output. make_style(bgMaroon = rgb(0.93, 0.19, 0.65), bg = TRUE) #> Crayon style function, bgMaroon: example output. \"pink\" %in% names(styles()) #> [1] TRUE \"bgMaroon\" %in% names(styles()) #> [1] TRUE cat(style(\"I am pink, too!\\n\", \"pink\", bg = \"bgMaroon\")) #> I am pink, too! #>"},{"path":"http://r-lib.github.io/crayon/dev/reference/num_ansi_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the number of ANSI colors to use ‚Äî num_ansi_colors","title":"Detect the number of ANSI colors to use ‚Äî num_ansi_colors","text":"Certain Unix Windows terminals, also certain R GUIs, e.g. RStudio, support styling terminal output using special control sequences (ANSI sequences). num_ansi_colors() detects current R session supports ANSI sequences, many colors supported.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/num_ansi_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the number of ANSI colors to use ‚Äî num_ansi_colors","text":"","code":"num_ansi_colors(stream = \"auto\")  detect_tty_colors()"},{"path":"http://r-lib.github.io/crayon/dev/reference/num_ansi_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect the number of ANSI colors to use ‚Äî num_ansi_colors","text":"stream stream used output, R connection object. can also string, one \"auto\", \"message\", \"stdout\", \"stderr\". \"auto\" select stdout() session interactive sinks, otherwise select stderr().","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/num_ansi_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect the number of ANSI colors to use ‚Äî num_ansi_colors","text":"Integer, number ANSI colors current R session supports stream.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/num_ansi_colors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect the number of ANSI colors to use ‚Äî num_ansi_colors","text":"detection mechanism quite involved designed work box systems. work system, please report bug. Setting options environment variables turn ANSI support error prone, inherited environments, e.g. knitr, might ANSI support. want turn ANSI colors, set NO_COLOR environment variable non-empty value. exact detection mechanism follows: cli.num_colors options set, returned. R_CLI_NUM_COLORS environment variable set non-empty value, used. crayon.enabled option set FALSE, 1L returned. (compatibility code uses crayon package.) crayon.enabled option set TRUE crayon.colors option set, value cli.default_num_colors option, unset, 8L returned. crayon.enabled option set TRUE crayon.colors option also set, latter returned. (compatibility code uses crayon package.) NO_COLOR environment variable set, 1L returned. knitr, 1L returned, turn colors .Rmd chunks. stream \"auto\" (default) active sink (either \"output\" \"message\"), return 1L. (theory need check stream actually used, easy way tell .) stream \"auto\", stderr() active sink , 1L returned. (sink active \"output\", R changes stdout() stream, check needed.) cli.default_num_colors option set, use . R running inside RGui Windows, R.app macOS, return 1L. R running inside RStudio, color support, appropriate number colors returned, usually 256L. R running Windows, inside Emacs version recent enough support ANSI colors, value cli.default_num_colors option, unset 8L returned. (Windows, Emacs isatty(stdout()) == FALSE, need check dealing terminals.) stream standard output standard error  terminal, 1L returned. Otherwise use cache result terminal color detection (see ). terminal color detection algorithm: COLORTERM environment variable set truecolor 24bit, return 16 million colors. COLORTERM environment variable set anything else, return value cli.num_default_colors option, 8L unset. R running Unix, inside Emacs version recent enough support ANSI colors, value cli.default_num_colors option returned, 8L unset. Windows RStudio terminal, apparently eight colors, cli.default_num_colors option can used override . recent enough Windows 10 terminal, either true color (build 14931) 256 color (build 10586) support. can also use cli.default_num_colors option override . Windows, ConEmu cmder, ANSICON loaded, value cli.default_num_colors, 8L unset, returned. Otherwise Windows, return 1L. Otherwise Unix try run tput colors determine number colors. succeeds, return return value. TERM environment variable xterm tput returned 8L, return 256L, xterm compatible terminals tend support 256 colors (https://github.com/r-lib/crayon/issues/17) can override cli.default_num_colors option. TERM set dumb, return 1L. TERM starts screen, xterm, vt100, return 8L. TERM contains color, ansi, cygwin linux, return 8L. Otherwise return 1L.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/num_ansi_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect the number of ANSI colors to use ‚Äî num_ansi_colors","text":"","code":"num_ansi_colors() #> [1] 256"},{"path":"http://r-lib.github.io/crayon/dev/reference/num_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of colors the terminal supports ‚Äî num_colors","title":"Number of colors the terminal supports ‚Äî num_colors","text":"crayon version 2.0.0, function simple wrapper num_ansi_colors(), additional twist crayon.colors option still obseved, takes precedence, compatibility.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/num_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of colors the terminal supports ‚Äî num_colors","text":"","code":"num_colors(forget = FALSE)"},{"path":"http://r-lib.github.io/crayon/dev/reference/num_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of colors the terminal supports ‚Äî num_colors","text":"forget Ignored. Included backwards compatibility.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/num_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of colors the terminal supports ‚Äî num_colors","text":"Number ANSI colors.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/num_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of colors the terminal supports ‚Äî num_colors","text":"","code":"num_colors() #> [1] 256"},{"path":"http://r-lib.github.io/crayon/dev/reference/show_ansi_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the ANSI color table on the screen ‚Äî show_ansi_colors","title":"Show the ANSI color table on the screen ‚Äî show_ansi_colors","text":"Show ANSI color table screen","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/show_ansi_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the ANSI color table on the screen ‚Äî show_ansi_colors","text":"","code":"show_ansi_colors(colors = num_colors())"},{"path":"http://r-lib.github.io/crayon/dev/reference/show_ansi_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the ANSI color table on the screen ‚Äî show_ansi_colors","text":"colors Number colors show, meaningful values 8 256. automatically set number supported colors, specified.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/show_ansi_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the ANSI color table on the screen ‚Äî show_ansi_colors","text":"printed string, invisibly.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/start.crayon.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch on or off a style ‚Äî start.crayon","title":"Switch on or off a style ‚Äî start.crayon","text":"Make style active. text printed screen now use style.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/start.crayon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch on or off a style ‚Äî start.crayon","text":"","code":"# S3 method for class 'crayon' start(x, ...)  finish(x, ...)  # S3 method for class 'crayon' finish(x, ...)"},{"path":"http://r-lib.github.io/crayon/dev/reference/start.crayon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch on or off a style ‚Äî start.crayon","text":"x Style. ... Ignored.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/start.crayon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Switch on or off a style ‚Äî start.crayon","text":"function rarely needed, e.g. colored user input. reasons, just call style function string.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/start.crayon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Switch on or off a style ‚Äî start.crayon","text":"","code":"## The input is red (if color is supported) get_name <- function() {   cat(\"Enter your name:\", start(red))   input <- readline()   cat(finish(red))   input } name <- get_name() #> Enter your name:  #>  name #> [1] \"\""},{"path":"http://r-lib.github.io/crayon/dev/reference/strip_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove ANSI escape sequences from a string ‚Äî strip_style","title":"Remove ANSI escape sequences from a string ‚Äî strip_style","text":"Remove ANSI escape sequences string","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/strip_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove ANSI escape sequences from a string ‚Äî strip_style","text":"","code":"strip_style(string)"},{"path":"http://r-lib.github.io/crayon/dev/reference/strip_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove ANSI escape sequences from a string ‚Äî strip_style","text":"string input string.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/strip_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove ANSI escape sequences from a string ‚Äî strip_style","text":"cleaned string.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/strip_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove ANSI escape sequences from a string ‚Äî strip_style","text":"","code":"strip_style(red(\"foobar\")) == \"foobar\" #> [1] TRUE"},{"path":"http://r-lib.github.io/crayon/dev/reference/style.html","id":null,"dir":"Reference","previous_headings":"","what":"Add style to a string ‚Äî style","title":"Add style to a string ‚Äî style","text":"See names(styles), crayon manual available styles.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add style to a string ‚Äî style","text":"","code":"style(string, as = NULL, bg = NULL)"},{"path":"http://r-lib.github.io/crayon/dev/reference/style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add style to a string ‚Äî style","text":"string Character vector style. Style function apply, either function object, name, object pass make_style(). bg Background style, style function, name passed make_style().","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add style to a string ‚Äî style","text":"Styled character vector.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add style to a string ‚Äî style","text":"","code":"## These are equivalent style(\"foobar\", bold) #> [1] \"\\033[1mfoobar\\033[22m\" style(\"foobar\", \"bold\") #> [1] \"\\033[1mfoobar\\033[22m\" bold(\"foobar\") #> [1] \"\\033[1mfoobar\\033[22m\""},{"path":"http://r-lib.github.io/crayon/dev/reference/styles.html","id":null,"dir":"Reference","previous_headings":"","what":"ANSI escape sequences of crayon styles ‚Äî styles","title":"ANSI escape sequences of crayon styles ‚Äî styles","text":"can use function list availables crayon styles, via names(styles()), explicitly apply ANSI escape seauence string.","code":""},{"path":"http://r-lib.github.io/crayon/dev/reference/styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ANSI escape sequences of crayon styles ‚Äî styles","text":"","code":"styles()"},{"path":"http://r-lib.github.io/crayon/dev/reference/styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ANSI escape sequences of crayon styles ‚Äî styles","text":"named list. list element list two strings, named ‚Äòopen‚Äô ‚Äòclose‚Äô.","code":""},{"path":[]},{"path":"http://r-lib.github.io/crayon/dev/reference/styles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ANSI escape sequences of crayon styles ‚Äî styles","text":"","code":"names(styles()) #>  [1] \"reset\"         \"bold\"          \"blurred\"       \"italic\"        #>  [5] \"underline\"     \"inverse\"       \"hidden\"        \"strikethrough\" #>  [9] \"black\"         \"red\"           \"green\"         \"yellow\"        #> [13] \"blue\"          \"magenta\"       \"cyan\"          \"white\"         #> [17] \"silver\"        \"bgBlack\"       \"bgRed\"         \"bgGreen\"       #> [21] \"bgYellow\"      \"bgBlue\"        \"bgMagenta\"     \"bgCyan\"        #> [25] \"bgWhite\"       \"pink\"          \"bgMaroon\"      cat(styles()[[\"bold\"]]$close) #>"},{"path":[]},{"path":"http://r-lib.github.io/crayon/dev/news/index.html","id":"crayon-153","dir":"Changelog","previous_headings":"","what":"crayon 1.5.3","title":"crayon 1.5.3","text":"CRAN release: 2024-06-20 semantics cli.default_num_colors options now different. now used default number colors number colors already set cli.num_colors option, R_CLI_NUM_COLORS environment variable, crayon.enabled crayon.colors options, NO_COLOR environment variable, knitr..progress option, sink() call stream. matches behavior cli package.","code":""},{"path":"http://r-lib.github.io/crayon/dev/news/index.html","id":"crayon-152","dir":"Changelog","previous_headings":"","what":"crayon 1.5.2","title":"crayon 1.5.2","text":"CRAN release: 2022-09-29 crayon functions now mark output right encoding, input marked (#136, #138).","code":""}]
